name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREV_TAG" ]; then
            echo "Generating changelog from $PREV_TAG to ${{ steps.get-version.outputs.version }}"
            
            # Generate changelog
            CHANGELOG=$(git log $PREV_TAG..${{ steps.get-version.outputs.version }} \
              --pretty=format:"- %s (%h)" \
              --no-merges)
            
            # Count different types of changes
            FEATURES=$(echo "$CHANGELOG" | grep -c "^- feat" || true)
            FIXES=$(echo "$CHANGELOG" | grep -c "^- fix" || true)
            BREAKING=$(echo "$CHANGELOG" | grep -c "^- .*!" || true)
            
            # Create formatted changelog
            {
              echo "CHANGELOG<<EOF"
              echo "## What's Changed"
              echo ""
              
              if [ $BREAKING -gt 0 ]; then
                echo "### ⚠️ Breaking Changes"
                echo "$CHANGELOG" | grep "^- .*!" || true
                echo ""
              fi
              
              if [ $FEATURES -gt 0 ]; then
                echo "### ✨ Features"
                echo "$CHANGELOG" | grep "^- feat" || true
                echo ""
              fi
              
              if [ $FIXES -gt 0 ]; then
                echo "### 🐛 Bug Fixes"
                echo "$CHANGELOG" | grep "^- fix" || true
                echo ""
              fi
              
              echo "### 📝 Other Changes"
              echo "$CHANGELOG" | grep -v "^- feat" | grep -v "^- fix" | grep -v "^- .*!" || true
              echo ""
              
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...${{ steps.get-version.outputs.version }}"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "Initial release 🎉" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: create-release
        run: |
          # Create release using GitHub CLI
          PRERELEASE=""
          if [[ "${{ steps.get-version.outputs.version }}" == *"-"* ]]; then
            PRERELEASE="--prerelease"
          fi
          
          # Check if release already exists
          if gh release view "${{ steps.get-version.outputs.version }}" >/dev/null 2>&1; then
            echo "Release ${{ steps.get-version.outputs.version }} already exists, skipping creation"
          else
            # Create new release
            gh release create "${{ steps.get-version.outputs.version }}" \
              --title "Release ${{ steps.get-version.outputs.version }}" \
              --notes "${{ steps.changelog.outputs.CHANGELOG }}" \
              $PRERELEASE
          fi
          
          # Get release info using gh release view
          RELEASE_JSON=$(gh release view "${{ steps.get-version.outputs.version }}" --json id,uploadUrl)
          echo "id=$(echo $RELEASE_JSON | jq -r .id)" >> $GITHUB_OUTPUT
          echo "upload_url=$(echo $RELEASE_JSON | jq -r .uploadUrl)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build release binaries for multiple platforms
  build-release:
    name: Build Release Binary
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: vibe-ticket
            archive_name: vibe-ticket-linux-amd64.tar.gz
          
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary_name: vibe-ticket
            archive_name: vibe-ticket-linux-amd64-musl.tar.gz
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: vibe-ticket
            archive_name: vibe-ticket-linux-arm64.tar.gz
            use_cross: true
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: vibe-ticket.exe
            archive_name: vibe-ticket-windows-amd64.zip
          
          - os: windows-latest
            target: i686-pc-windows-msvc
            binary_name: vibe-ticket.exe
            archive_name: vibe-ticket-windows-i686.zip
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: vibe-ticket
            archive_name: vibe-ticket-darwin-amd64.tar.gz
          
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: vibe-ticket
            archive_name: vibe-ticket-darwin-arm64.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-release
          key: ${{ matrix.target }}

      - name: Install cross compilation tools
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Build release binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          elif [ "${{ matrix.use_cross }}" != "true" ]; then
            strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          fi

      - name: Create archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows - create zip
            7z a ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          else
            # Unix - create tar.gz
            tar czf ../../../${{ matrix.archive_name }} ${{ matrix.binary_name }}
          fi
          
          cd ../../..
          
          # Generate checksum
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            certutil -hashfile ${{ matrix.archive_name }} SHA256 > ${{ matrix.archive_name }}.sha256
          else
            shasum -a 256 ${{ matrix.archive_name }} > ${{ matrix.archive_name }}.sha256
          fi

      - name: Upload release binary
        shell: bash
        run: |
          gh release upload "${{ needs.create-release.outputs.version }}" "${{ matrix.archive_name }}" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload checksum
        shell: bash
        run: |
          gh release upload "${{ needs.create-release.outputs.version }}" "${{ matrix.archive_name }}.sha256" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io
  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-publish

      - name: Verify version matches tag
        run: |
          TAG_VERSION="${{ needs.create-release.outputs.version }}"
          TAG_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | cut -d'"' -f2)
          
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Error: Tag version ($TAG_VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi

      - name: Run tests
        run: cargo test --all-features

      - name: Publish to crates.io
        if: env.CRATES_IO_TOKEN != ''
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      
      - name: Skip crates.io publish (no token)
        if: env.CRATES_IO_TOKEN == ''
        run: echo "Skipping crates.io publish - CRATES_IO_TOKEN not set"
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

  # Generate comprehensive checksums file
  generate-checksums:
    name: Generate Checksums
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate comprehensive checksums
        run: |
          if [ -d artifacts ] && [ "$(ls -A artifacts)" ]; then
            cd artifacts
            
            # Create checksums file
            echo "# SHA256 Checksums for vibe-ticket ${{ needs.create-release.outputs.version }}" > ../checksums.txt
            echo "" >> ../checksums.txt
            
            # Find all release archives and generate checksums
            find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                sha256sum "$file" | awk '{print $1 "  " $2}' | sed "s|./[^/]*/||" >> ../checksums.txt
              fi
            done
            
            cd ..
            
            # Sort checksums file if it has content
            if [ -f checksums.txt ] && [ -s checksums.txt ]; then
              sort -k2 checksums.txt -o checksums.txt
            fi
          else
            echo "No artifacts found, creating empty checksums file"
            echo "# SHA256 Checksums for vibe-ticket ${{ needs.create-release.outputs.version }}" > checksums.txt
            echo "No release artifacts generated" >> checksums.txt
          fi

      - name: Upload checksums file
        if: always()
        run: |
          if [ -f checksums.txt ]; then
            gh release upload "${{ needs.create-release.outputs.version }}" \
              "checksums.txt" \
              --clobber
          else
            echo "No checksums file to upload"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update documentation
  update-docs:
    name: Update Documentation
    needs: [create-release, publish-crate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Generate documentation
        run: |
          cargo doc --no-deps --all-features
          echo '<meta http-equiv="refresh" content="0; url=vibe_ticket/index.html">' > target/doc/index.html

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  # Final release verification
  verify-release:
    name: Verify Release
    needs: [create-release, build-release, publish-crate, generate-checksums]
    runs-on: ubuntu-latest
    steps:
      - name: Verify crates.io package
        continue-on-error: true
        run: |
          # Only verify if CRATES_IO_TOKEN was set
          if [ -n "$CRATES_IO_TOKEN" ]; then
            # Wait for crates.io to index the package
            sleep 30
            
            # Check if package is available
            VERSION="${{ needs.create-release.outputs.version }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix
            
            curl -s https://crates.io/api/v1/crates/vibe-ticket/$VERSION | \
              jq -e '.version.num == "'$VERSION'"' || \
              echo "Package not yet available on crates.io (this is normal if CRATES_IO_TOKEN is not set)"
          else
            echo "Skipping crates.io verification - CRATES_IO_TOKEN not set"
          fi
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Summary
        run: |
          echo "# Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully released vibe-ticket ${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Linux (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- Linux (x86_64-musl)" >> $GITHUB_STEP_SUMMARY
          echo "- Linux (aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- Windows (i686)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (x86_64)" >> $GITHUB_STEP_SUMMARY
          echo "- macOS (aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Published to" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Releases" >> $GITHUB_STEP_SUMMARY
          if [ -n "$CRATES_IO_TOKEN" ]; then
            echo "- ✅ crates.io" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ crates.io (skipped - no token)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- ✅ Documentation updated" >> $GITHUB_STEP_SUMMARY
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
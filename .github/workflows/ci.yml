name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  id-token: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  # Matrix testing across multiple Rust versions and platforms
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Core tests
          - os: ubuntu-latest
            rust: stable
          - os: windows-latest
            rust: stable
          - os: macos-latest
            rust: stable
          # Beta/Nightly on Linux only
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
          # MSRV
          - os: ubuntu-latest
            rust: 1.85.0  # MSRV (Minimum Supported Rust Version)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for better cache keys

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-rust
          shared-key: ${{ matrix.os }}-${{ matrix.rust }}
          cache-on-failure: true

      - name: Build
        run: cargo build --all-targets

      - name: Run tests
        run: cargo test --all-targets

      - name: Run doctests
        run: cargo test --doc


  # Feature flag testing
  feature-tests:
    name: Feature Flag Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        features:
          - ""  # default features
          - "--all-features"
          - "--no-default-features"
          - "--features api"
          - "--features database"
          - "--features api,database"
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-features

      - name: Test with features ${{ matrix.features }}
        run: |
          cargo check ${{ matrix.features }}
          cargo test ${{ matrix.features }}

  # Code formatting check
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Linting with clippy
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-clippy

      - name: Run clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings \
            -A clippy::option_if_let_else \
            -A clippy::map_unwrap_or \
            -A clippy::too_many_lines \
            -A clippy::struct_excessive_bools \
            -A clippy::fn_params_excessive_bools \
            -A clippy::missing-panics-doc \
            -A clippy::redundant-closure-for-method-calls \
            -A clippy::needless-pass-by-value \
            -A clippy::redundant-clone \
            -A clippy::uninlined-format-args \
            -A clippy::unnecessary-wraps \
            -A clippy::unused-self \
            -A clippy::trivially-copy-pass-by-ref \
            -A clippy::cast-possible-truncation \
            -A clippy::cast-precision-loss \
            -A clippy::match-same-arms \
            -A clippy::cast-sign-loss

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Check for known vulnerabilities in dependencies
        continue-on-error: true
        run: |
          cargo audit --deny warnings \
            --ignore RUSTSEC-2020-0071 \
            --ignore RUSTSEC-2021-0145

  # Code coverage with tarpaulin
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-coverage

      - name: Install tarpaulin
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Generate code coverage
        run: |
          cargo tarpaulin --all-features --workspace --timeout 300 \
            --out xml --out html \
            --exclude-files 'target/*' \
            --exclude-files 'tests/*'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml
          flags: unittests
          name: vibe-ticket-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: |
            tarpaulin-report.html
            cobertura.xml

  # Documentation build and test
  doc:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-doc

      - name: Check documentation
        run: cargo doc --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings

      - name: Test documentation examples
        run: cargo test --doc --all-features

      - name: Generate documentation
        if: github.ref == 'refs/heads/main'
        run: |
          cargo doc --no-deps --all-features
          echo '<meta http-equiv="refresh" content="0; url=vibe_ticket/index.html">' > target/doc/index.html

      - name: Deploy documentation
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  # Benchmarks
  bench:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-bench

      - name: Run benchmarks
        run: cargo bench

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion

  # MSRV (Minimum Supported Rust Version) check
  msrv:
    name: MSRV Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust 1.85.0
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.85.0

      - name: Setup cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: v2-msrv

      - name: Check MSRV
        run: |
          cargo check --all-features
          cargo test --all-features

  # Summary job to ensure all checks pass
  ci-success:
    name: CI Success
    if: always()
    needs:
      - test
      - feature-tests
      - fmt
      - clippy
      - security-audit
      - coverage
      - doc
      - msrv
    runs-on: ubuntu-latest
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.test.result }}" != "success" ]] || 
             [[ "${{ needs.feature-tests.result }}" != "success" ]] ||
             [[ "${{ needs.fmt.result }}" != "success" ]] ||
             [[ "${{ needs.clippy.result }}" != "success" ]] ||
             [[ "${{ needs.security-audit.result }}" != "success" ]] ||
             [[ "${{ needs.coverage.result }}" != "success" ]] ||
             [[ "${{ needs.doc.result }}" != "success" ]] ||
             [[ "${{ needs.msrv.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All CI checks passed successfully!"
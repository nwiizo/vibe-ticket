--- a/src/cli/handlers/new.rs
+++ b/src/cli/handlers/new.rs
@@ -6,6 +6,7 @@ use crate::cli::utils::*;
 use crate::core::{Priority, Ticket};
 use crate::error::{Result, VibeTicketError};
 use crate::storage::{FileStorage, TicketRepository};
+use crate::integration::{notify_ticket_created, notify_status_changed};
 use std::convert::TryFrom;
 
 /// Handler for the `new` command
@@ -65,6 +66,9 @@ pub fn handle_new_command(
     // Save the ticket
     storage.save(&ticket)?;
 
+    // Notify MCP about ticket creation
+    notify_ticket_created(&ticket);
+
     // If --start flag is provided, start working on the ticket immediately
     if start {
+        let old_status = ticket.status.clone();
         ticket.start();
@@ -72,6 +76,9 @@ pub fn handle_new_command(
         storage.save(&ticket)?;
         storage.set_active(&ticket.id)?;
 
+        // Notify MCP about status change
+        notify_status_changed(&ticket.id, old_status, ticket.status.clone());
+
         if output.is_json() {
             output.print_json(&serde_json::json!({
                 "success": true,

--- a/src/cli/handlers/close.rs
+++ b/src/cli/handlers/close.rs
@@ -6,6 +6,7 @@ use crate::cli::utils::*;
 use crate::core::{Status, TicketId};
 use crate::error::{Result, VibeTicketError};
 use crate::storage::{ActiveTicketRepository, FileStorage, TicketRepository};
+use crate::integration::notify_ticket_closed;
 
 /// Handler for the `close` command
 pub fn handle_close_command(
@@ -44,6 +45,9 @@ pub fn handle_close_command(
     ticket.closed_at = Some(chrono::Utc::now());
     storage.save(&ticket)?;
 
+    // Notify MCP about ticket closure
+    notify_ticket_closed(&ticket.id, message.clone());
+
     // Clear active ticket if this was the one
     if let Ok(Some(active_id)) = storage.get_active() {
         if active_id == ticket.id {

--- a/src/cli/handlers/edit.rs
+++ b/src/cli/handlers/edit.rs
@@ -6,6 +6,7 @@ use crate::cli::utils::*;
 use crate::core::{Priority, Status, TicketId};
 use crate::error::{Result, VibeTicketError};
 use crate::storage::{FileStorage, TicketRepository};
+use crate::integration::{notify_ticket_updated, notify_status_changed};
 use std::convert::TryFrom;
 
 /// Handler for the `edit` command
@@ -51,6 +52,7 @@ pub fn handle_edit_command(
 
     // Apply status change if provided
     if let Some(status_str) = status {
+        let old_status = ticket.status.clone();
         let new_status = Status::try_from(status_str.as_str())
             .map_err(|_| VibeTicketError::InvalidStatus {
                 status: status_str.clone(),
@@ -58,6 +60,9 @@ pub fn handle_edit_command(
         ticket.status = new_status;
         has_changes = true;
         changes.push(format!("Status: {:?} â†’ {:?}", ticket.status, new_status));
+        
+        // Notify about status change
+        notify_status_changed(&ticket.id, old_status, new_status);
     }
 
     // Apply other changes...
@@ -75,6 +80,9 @@ pub fn handle_edit_command(
 
     if has_changes {
         storage.save(&ticket)?;
+        
+        // Notify MCP about ticket update
+        notify_ticket_updated(&ticket);
 
         if output.is_json() {
             output.print_json(&serde_json::json!({